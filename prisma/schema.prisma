generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Region {
  id                 String   @id @default(cuid())
  latitude           Float?
  longitude          Float?
  imageUrls          String   @db.LongText
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  bestTimeToVisit_ar String?  @db.VarChar(100)
  bestTimeToVisit_en String?  @db.VarChar(100)
  bestTimeToVisit_es String?  @db.VarChar(100)
  bestTimeToVisit_fr String?  @db.VarChar(100)
  bestTimeToVisit_it String?  @db.VarChar(100)
  climate_ar         String?  @db.VarChar(100)
  climate_en         String?  @db.VarChar(100)
  climate_es         String?  @db.VarChar(100)
  climate_fr         String?  @db.VarChar(100)
  climate_it         String?  @db.VarChar(100)
  description_ar     String?  @db.Text
  description_en     String?  @db.Text
  description_es     String?  @db.Text
  description_fr     String?  @db.Text
  description_it     String?  @db.Text
  keyFacts_ar        String?  @db.Text
  keyFacts_en        String?  @db.Text
  keyFacts_es        String?  @db.Text
  keyFacts_fr        String?  @db.Text
  keyFacts_it        String?  @db.Text
  name_ar            String   @db.VarChar(255)
  name_en            String   @db.VarChar(255)
  name_es            String   @db.VarChar(255)
  name_fr            String   @db.VarChar(255)
  name_it            String   @db.VarChar(255)

  // Back-relations for join tables
  tourPackageRegions      TourPackageRegion[]
  guideRegions            GuideRegion[]
  transportServiceRegions TransportServiceRegion[]

  @@map("regions")
}

model Attraction {
  id             String   @id @default(cuid())
  regionId       String
  latitude       Float?
  longitude      Float?
  imageUrls      String   @db.LongText
  rating         Float?   @default(0)
  tags           String   @db.LongText
  entryFee       Float?   @default(0)
  currency       String?  @default("MAD") @db.VarChar(10)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  openingHours   String?  @db.LongText
  category_ar    String?  @db.VarChar(100)
  category_en    String?  @db.VarChar(100)
  category_es    String?  @db.VarChar(100)
  category_fr    String?  @db.VarChar(100)
  category_it    String?  @db.VarChar(100)
  description_ar String?  @db.Text
  description_en String?  @db.Text
  description_es String?  @db.Text
  description_fr String?  @db.Text
  description_it String?  @db.Text
  name_ar        String   @db.VarChar(255)
  name_en        String   @db.VarChar(255)
  name_es        String   @db.VarChar(255)
  name_fr        String   @db.VarChar(255)
  name_it        String   @db.VarChar(255)

  @@index([regionId], map: "attractions_regionId_fkey")
  @@map("attractions")
}

model TourPackage {
  id              String   @id @default(cuid())
  duration        Int
  price           Float
  currency        String   @default("MAD") @db.VarChar(10)
  imageUrls       String   @db.LongText
  included        String   @db.LongText
  excluded        String   @db.LongText
  regionId        String
  maxParticipants Int?
  featured        Boolean  @default(false)
  rating          Float?   @default(0)
  reviewCount     Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  description_ar  String?  @db.Text
  description_en  String?  @db.Text
  description_es  String?  @db.Text
  description_fr  String?  @db.Text
  description_it  String?  @db.Text
  difficulty_ar   String?  @db.VarChar(50)
  difficulty_en   String?  @db.VarChar(50)
  difficulty_es   String?  @db.VarChar(50)
  difficulty_fr   String?  @db.VarChar(50)
  difficulty_it   String?  @db.VarChar(50)
  title_ar        String   @db.VarChar(255)
  title_en        String   @db.VarChar(255)
  title_es        String   @db.VarChar(255)
  title_fr        String   @db.VarChar(255)
  title_it        String   @db.VarChar(255)

  // Relationships
  itinerary       Itinerary?
  regions         TourPackageRegion[]

  @@index([regionId], map: "tour_packages_regionId_fkey")
  @@map("tour_packages")
}

model TourPackageRegion {
  id            String      @id @default(cuid())
  tourPackageId String
  regionId      String

  // Relations
  tourPackage   TourPackage @relation(fields: [tourPackageId], references: [id])
  region        Region      @relation(fields: [regionId], references: [id])

  @@unique([tourPackageId, regionId])
  @@index([regionId], map: "tour_package_regions_regionId_fkey")
  @@map("tour_package_regions")
}

model Itinerary {
  id            String        @id @default(cuid())
  tourPackageId String        @unique

  // Relations
  tourPackage   TourPackage   @relation(fields: [tourPackageId], references: [id])
  days          ItineraryDay[]

  @@map("itineraries")
}

model ItineraryDay {
  id             String         @id @default(cuid())
  itineraryId    String
  dayNumber      Int
  activities     String         @db.LongText
  description_ar String?        @db.Text
  description_en String?        @db.Text
  description_es String?        @db.Text
  description_fr String?        @db.Text
  description_it String?        @db.Text
  title_ar       String?        @db.VarChar(255)
  title_en       String?        @db.VarChar(255)
  title_es       String?        @db.VarChar(255)
  title_fr       String?        @db.VarChar(255)
  title_it       String?        @db.VarChar(255)

  // Relations
  itinerary      Itinerary      @relation(fields: [itineraryId], references: [id])
  accommodation  Accommodation?
  meals          Meal[]

  @@unique([itineraryId, dayNumber])
  @@map("itinerary_days")
}

model Accommodation {
  id             String  @id @default(cuid())
  itineraryDayId String  @unique
  address        String? @db.Text
  stars          Int?
  description_ar String? @db.Text
  description_en String? @db.Text
  description_es String? @db.Text
  description_fr String? @db.Text
  description_it String? @db.Text
  name_ar        String  @db.VarChar(255)
  name_en        String  @db.VarChar(255)
  name_es        String  @db.VarChar(255)
  name_fr        String  @db.VarChar(255)
  name_it        String  @db.VarChar(255)
  type_ar        String? @db.VarChar(100)
  type_en        String? @db.VarChar(100)
  type_es        String? @db.VarChar(100)
  type_fr        String? @db.VarChar(100)
  type_it        String? @db.VarChar(100)

  // Relations
  itineraryDay   ItineraryDay @relation(fields: [itineraryDayId], references: [id])

  @@map("accommodations")
}

model Meal {
  id             String  @id @default(cuid())
  itineraryDayId String
  type           String  @db.VarChar(50)
  included       Boolean @default(false)
  description_ar String? @db.Text
  description_en String? @db.Text
  description_es String? @db.Text
  description_fr String? @db.Text
  description_it String? @db.Text

  // Relations
  itineraryDay   ItineraryDay @relation(fields: [itineraryDayId], references: [id])

  @@index([itineraryDayId], map: "meals_itineraryDayId_fkey")
  @@map("meals")
}

model MediaItem {
  id             String   @id @default(cuid())
  type           String   @db.VarChar(50)
  url            String   @db.VarChar(500)
  thumbnailUrl   String?  @db.VarChar(500)
  tags           String   @db.LongText
  regionId       String?
  categoryId     String?  @db.VarChar(100)
  uploadDate     DateTime @default(now())
  photographer   String?  @db.VarChar(255)
  latitude       Float?
  longitude      Float?
  isFeatured     Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  description_ar String?  @db.Text
  description_en String?  @db.Text
  description_es String?  @db.Text
  description_fr String?  @db.Text
  description_it String?  @db.Text
  title_ar       String   @db.VarChar(255)
  title_en       String   @db.VarChar(255)
  title_es       String   @db.VarChar(255)
  title_fr       String   @db.VarChar(255)
  title_it       String   @db.VarChar(255)

  @@index([regionId], map: "media_items_regionId_fkey")
  @@map("media_items")
}

model ContentItem {
  id             String   @id @default(cuid())
  type           String   @db.VarChar(50)
  tags           String   @db.LongText
  authorId       String?
  publishDate    DateTime @default(now())
  mediaIds       String   @db.LongText
  regionId       String?
  categoryId     String?  @db.VarChar(100)
  readTime       Int?
  isFeatured     Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  content_ar     String?  @db.LongText
  content_en     String?  @db.LongText
  content_es     String?  @db.LongText
  content_fr     String?  @db.LongText
  content_it     String?  @db.LongText
  description_ar String?  @db.Text
  description_en String?  @db.Text
  description_es String?  @db.Text
  description_fr String?  @db.Text
  description_it String?  @db.Text
  title_ar       String   @db.VarChar(255)
  title_en       String   @db.VarChar(255)
  title_es       String   @db.VarChar(255)
  title_fr       String   @db.VarChar(255)
  title_it       String   @db.VarChar(255)

  @@index([regionId], map: "content_items_regionId_fkey")
  @@map("content_items")
}

model Guide {
  id                String   @id @default(cuid())
  languages         String   @db.LongText
  specialties       String   @db.LongText
  certifications    String   @db.LongText
  yearsOfExperience Int?     @default(0)
  imageUrls         String   @db.LongText
  hourlyRate        Float?
  currency          String?  @default("MAD") @db.VarChar(10)
  email             String?  @db.VarChar(255)
  phone             String?  @db.VarChar(50)
  website           String?  @db.VarChar(500)
  rating            Float?   @default(0)
  reviewCount       Int      @default(0)
  available         Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  availability      String?  @db.LongText
  description_ar    String?  @db.Text
  description_en    String?  @db.Text
  description_es    String?  @db.Text
  description_fr    String?  @db.Text
  description_it    String?  @db.Text
  name_ar           String   @db.VarChar(255)
  name_en           String   @db.VarChar(255)
  name_es           String   @db.VarChar(255)
  name_fr           String   @db.VarChar(255)
  name_it           String   @db.VarChar(255)

  // Relationships
  regions           GuideRegion[]

  @@map("guides")
}

model GuideRegion {
  id       String @id @default(cuid())
  guideId  String
  regionId String

  // Relations
  guide    Guide  @relation(fields: [guideId], references: [id])
  region   Region @relation(fields: [regionId], references: [id])

  @@unique([guideId, regionId])
  @@index([regionId], map: "guide_regions_regionId_fkey")
  @@map("guide_regions")
}

model TransportService {
  id              String   @id @default(cuid())
  type            String   @db.VarChar(100)
  airportTransfer Boolean  @default(false)
  imageUrls       String   @db.LongText
  email           String?  @db.VarChar(255)
  phone           String?  @db.VarChar(50)
  website         String?  @db.VarChar(500)
  available       Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  serviceArea     String?  @db.LongText
  description_ar  String?  @db.Text
  description_en  String?  @db.Text
  description_es  String?  @db.Text
  description_fr  String?  @db.Text
  description_it  String?  @db.Text
  name_ar         String   @db.VarChar(255)
  name_en         String   @db.VarChar(255)
  name_es         String   @db.VarChar(255)
  name_fr         String   @db.VarChar(255)
  name_it         String   @db.VarChar(255)
  type_ar         String   @db.VarChar(100)
  type_en         String   @db.VarChar(100)
  type_es         String   @db.VarChar(100)
  type_fr         String   @db.VarChar(100)
  type_it         String   @db.VarChar(100)

  // Relationships
  vehicleOptions  VehicleOption[]
  regions         TransportServiceRegion[]

  @@map("transport_services")
}

model TransportServiceRegion {
  id                 String @id @default(cuid())
  transportServiceId String
  regionId           String

  // Relations
  transportService   TransportService @relation(fields: [transportServiceId], references: [id])
  region             Region           @relation(fields: [regionId], references: [id])

  @@unique([transportServiceId, regionId])
  @@index([regionId], map: "transport_service_regions_regionId_fkey")
  @@map("transport_service_regions")
}

model VehicleOption {
  id                 String @id @default(cuid())
  transportServiceId String
  type               String @db.VarChar(100)
  capacity           Int
  pricePerDay        Float
  currency           String @default("MAD") @db.VarChar(10)
  features           String @db.LongText
  imageUrls          String @db.LongText

  // Relations
  transportService   TransportService @relation(fields: [transportServiceId], references: [id])

  @@index([transportServiceId], map: "vehicle_options_transportServiceId_fkey")
  @@map("vehicle_options")
}

model Review {
  id               String   @id @default(cuid())
  userId           String
  itemId           String
  itemType         String   @db.VarChar(50)
  rating           Float
  title            String?  @db.VarChar(255)
  comment          String?  @db.Text
  date             DateTime @default(now())
  helpfulVotes     Int      @default(0)
  verifiedUser     Boolean  @default(false)
  verifiedPurchase Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([itemId], map: "reviews_transport_service_fkey")
  @@index([userId], map: "reviews_userId_fkey")
  @@map("reviews")
}

model UserPreferences {
  id                  String   @id @default(cuid())
  userId              String   @unique
  language            String   @default("en") @db.VarChar(10)
  currency            String   @default("MAD") @db.VarChar(10)
  favoriteRegions     String   @db.LongText
  preferredCategories String   @db.LongText
  darkMode            Boolean  @default(false)
  emailNotifications  Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("user_preferences")
}

model SavedItem {
  id        String   @id @default(cuid())
  userId    String
  itemId    String
  itemType  String   @db.VarChar(50)
  savedDate DateTime @default(now())
  notes     String?  @db.Text

  @@unique([userId, itemId, itemType])
  @@map("saved_items")
}

model SearchQuery {
  id        String   @id @default(cuid())
  query     String   @db.VarChar(500)
  userId    String?
  count     Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId], map: "search_queries_userId_fkey")
  @@map("search_queries")
}

model Festival {
  id                     String   @id @default(cuid())
  name                   String   @db.VarChar(255)
  description            String?  @db.Text
  type                   String   @db.VarChar(100)
  location               String   @db.VarChar(255)
  regionId               String?
  timeOfYear             String   @db.VarChar(100)
  duration               Int      @default(1)
  images                 String   @db.LongText
  videoUrl               String?  @db.VarChar(500)
  established            String?  @db.VarChar(100)
  historicalSignificance String?  @db.Text
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@index([regionId], map: "festivals_regionId_fkey")
  @@map("festivals")
}

model Cuisine {
  id              String   @id @default(cuid())
  name            String   @db.VarChar(255)
  description     String?  @db.Text
  type            String   @db.VarChar(100)
  regionIds       String   @db.LongText
  ingredients     String   @db.LongText
  spiceLevel      String   @db.VarChar(50)
  images          String   @db.LongText
  videoUrl        String?  @db.VarChar(500)
  popularVariants String   @db.LongText
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("cuisines")
}

model Heritage {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(255)
  description String?  @db.Text
  type        String   @db.VarChar(100)
  regionIds   String   @db.LongText
  images      String   @db.LongText
  videoUrl    String?  @db.VarChar(500)
  importance  String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("heritages")
}

model Clothing {
  id              String   @id @default(cuid())
  name            String   @db.VarChar(255)
  description     String?  @db.Text
  gender          String   @db.VarChar(50)
  regionIds       String   @db.LongText
  materials       String   @db.LongText
  occasions       String   @db.LongText
  images          String   @db.LongText
  historicalNotes String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("clothing")
}

model User {
  id                       String     @id @default(cuid())
  email                    String     @unique @db.VarChar(255)
  passwordHash             String     @db.VarChar(255)
  firstName                String     @db.VarChar(100)
  lastName                 String     @db.VarChar(100)
  phone                    String?    @db.VarChar(50)
  role                     UserRole   @default(TOURIST)
  status                   UserStatus @default(PENDING)
  emailVerified            Boolean    @default(false)
  twoFactorEnabled         Boolean    @default(false)
  twoFactorSecret          String?    @db.VarChar(255)
  bio                      String?    @db.Text
  avatarUrl                String?    @db.VarChar(500)
  preferences              String?    @db.LongText
  lastLogin                DateTime?
  loginCount               Int        @default(0)
  failedLoginAttempts      Int        @default(0)
  lockedUntil              DateTime?
  resetPasswordToken       String?    @db.VarChar(255)
  resetPasswordExpires     DateTime?
  emailVerificationToken   String?    @db.VarChar(255)
  emailVerificationExpires DateTime?
  createdAt                DateTime   @default(now())
  updatedAt                DateTime   @updatedAt

  @@map("users")
}

enum UserRole {
  TOURIST
  GUIDE
  ADMIN
  SUPER_ADMIN
}

enum UserStatus {
  PENDING
  ACTIVE
  SUSPENDED
  BANNED
}

// New model for Travel Guides
model TravelGuide {
  id               String   @id @default(cuid())
  regionIds        String   @db.LongText
  author           String   @db.VarChar(255)
  publishedDate    DateTime
  type             String   @db.VarChar(100)
  tags             String   @db.LongText
  imageUrls        String   @db.LongText
  featuredImageUrl String?  @db.VarChar(500)
  videoUrl         String?  @db.VarChar(500)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  title_ar         String   @db.VarChar(255)
  title_en         String   @db.VarChar(255)
  title_es         String   @db.VarChar(255)
  title_fr         String   @db.VarChar(255)
  title_it         String   @db.VarChar(255)
  description_ar   String?  @db.Text
  description_en   String?  @db.Text
  description_es   String?  @db.Text
  description_fr   String?  @db.Text
  description_it   String?  @db.Text
  content_ar       String?  @db.LongText
  content_en       String?  @db.LongText
  content_es       String?  @db.LongText
  content_fr       String?  @db.LongText
  content_it       String?  @db.LongText

  @@map("travel_guides")
}
