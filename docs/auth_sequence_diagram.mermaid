sequenceDiagram
    participant U as User
    participant RC as RegisterComponent
    participant LC as LoginComponent
    participant AS as AuthStore
    participant TI as TokenInterceptor
    participant AuthAPI as AuthService
    participant PS as PasswordService
    participant RL as RateLimitService
    participant UR as UserRepository
    participant SR as SessionRepository
    participant ES as EmailService
    participant AL as AuditLogger
    participant DB as Database
    
    Note over U, DB: User Registration Flow
    U->>RC: Fill registration form
    RC->>RC: Validate form data
    RC->>AS: register(registerData)
    AS->>AuthAPI: POST /api/auth/register
    AuthAPI->>RL: checkRateLimit(ip, 'register')
    RL-->>AuthAPI: Rate limit OK
    AuthAPI->>AuthAPI: Validate input data
    AuthAPI->>UR: findByEmail(email)
    UR->>DB: SELECT user WHERE email
    DB-->>UR: User not found
    UR-->>AuthAPI: Email available
    AuthAPI->>PS: hashPassword(password)
    PS-->>AuthAPI: Hashed password
    AuthAPI->>UR: create(userData)
    UR->>DB: INSERT INTO users
    DB-->>UR: User created with ID
    UR-->>AuthAPI: UserProfile object
    AuthAPI->>AuthAPI: Generate verification token
    AuthAPI->>UR: update(userId, verificationToken)
    UR->>DB: UPDATE users SET verification_token
    AuthAPI->>ES: sendVerificationEmail(user, token)
    ES-->>AuthAPI: Email sent
    AuthAPI->>AL: logAction('user_registered')
    AL->>DB: INSERT INTO audit_logs
    AuthAPI-->>AS: Registration successful
    AS->>AS: Update loading state
    AS-->>RC: Success response
    RC->>RC: Show success message
    RC->>RC: Redirect to verification page

    Note over U, DB: User Login Flow
    U->>LC: Enter credentials
    LC->>AS: login(credentials)
    AS->>AuthAPI: POST /api/auth/login
    AuthAPI->>RL: checkRateLimit(ip, 'login')
    RL-->>AuthAPI: Rate limit OK
    AuthAPI->>UR: findByEmail(email)
    UR->>DB: SELECT user WHERE email
    DB-->>UR: User data
    UR-->>AuthAPI: UserProfile object
    AuthAPI->>PS: verifyPassword(password, hash)
    PS-->>AuthAPI: Password valid
    AuthAPI->>AuthAPI: Check account status
    AuthAPI->>AuthAPI: generateTokens(user)
    AuthAPI->>SR: create(sessionData)
    SR->>DB: INSERT INTO user_sessions
    DB-->>SR: Session created
    AuthAPI->>UR: updateLastLogin(userId)
    UR->>DB: UPDATE users SET last_login
    AuthAPI->>AL: logAction('user_login')
    AL->>DB: INSERT INTO audit_logs
    AuthAPI-->>AS: Login successful with tokens
    AS->>AS: Store tokens and user
    AS->>AS: Set authenticated state
    AS-->>LC: Login response
    LC->>LC: Redirect to dashboard

    Note over U, DB: Token Refresh Flow
    U->>TI: Make authenticated request
    TI->>TI: Check token expiry
    TI->>AS: Token expired, refresh needed
    AS->>AuthAPI: POST /api/auth/refresh
    AuthAPI->>SR: findByToken(refreshTokenHash)
    SR->>DB: SELECT session WHERE token_hash
    DB-->>SR: Session data
    SR-->>AuthAPI: Valid session
    AuthAPI->>AuthAPI: Generate new access token
    AuthAPI->>SR: update(sessionId, newTokenHash)
    SR->>DB: UPDATE user_sessions
    AuthAPI-->>AS: New tokens
    AS->>AS: Update stored tokens
    AS-->>TI: Tokens refreshed
    TI->>AuthAPI: Retry original request with new token
    AuthAPI-->>U: Requested data

    Note over U, DB: Admin User Management Flow
    participant ADM as AdminDashboard
    participant UMC as UserManagementComponent
    participant PS as PermissionService
    
    U->>ADM: Access admin panel
    ADM->>AS: Check authentication
    AS-->>ADM: User authenticated
    ADM->>PS: hasPermission(user.role, 'admin.dashboard.read')
    PS-->>ADM: Permission granted
    ADM->>AuthAPI: GET /api/admin/dashboard
    AuthAPI->>UR: getDashboardStats()
    UR->>DB: SELECT analytics queries
    DB-->>UR: Dashboard data
    UR-->>AuthAPI: Aggregated stats
    AuthAPI-->>ADM: Dashboard data
    
    U->>UMC: Navigate to user management
    UMC->>PS: hasPermission(user.role, 'admin.users.read')
    PS-->>UMC: Permission granted
    UMC->>AuthAPI: GET /api/admin/users
    AuthAPI->>UR: findWithFilters(filters)
    UR->>DB: SELECT users with pagination
    DB-->>UR: User list
    UR-->>AuthAPI: Paginated users
    AuthAPI-->>UMC: User management data
    
    U->>UMC: Update user status
    UMC->>PS: hasPermission(user.role, 'admin.users.write')
    PS-->>UMC: Permission granted
    UMC->>AuthAPI: PATCH /api/admin/users/:id
    AuthAPI->>UR: update(userId, statusUpdate)
    UR->>DB: UPDATE users SET status
    AuthAPI->>AL: logAdminAction(adminId, 'user_status_updated', userId)
    AL->>DB: INSERT INTO audit_logs
    AuthAPI-->>UMC: Update successful
    UMC->>UMC: Refresh user list

    Note over U, DB: Password Reset Flow
    U->>LC: Click forgot password
    LC->>AuthAPI: POST /api/auth/forgot-password
    AuthAPI->>RL: checkRateLimit(ip, 'passwordReset')
    RL-->>AuthAPI: Rate limit OK
    AuthAPI->>UR: findByEmail(email)
    UR->>DB: SELECT user WHERE email
    DB-->>UR: User found
    UR-->>AuthAPI: UserProfile object
    AuthAPI->>AuthAPI: Generate reset token
    AuthAPI->>UR: update(userId, resetToken)
    UR->>DB: UPDATE users SET reset_token
    AuthAPI->>ES: sendPasswordResetEmail(user, token)
    ES-->>AuthAPI: Email sent
    AuthAPI->>AL: logAction('password_reset_requested')
    AL->>DB: INSERT INTO audit_logs
    AuthAPI-->>LC: Reset email sent
    
    U->>U: Check email and click reset link
    U->>LC: Enter new password
    LC->>AuthAPI: POST /api/auth/reset-password
    AuthAPI->>UR: findByResetToken(token)
    UR->>DB: SELECT user WHERE reset_token
    DB-->>UR: User with valid token
    UR-->>AuthAPI: UserProfile object
    AuthAPI->>PS: hashPassword(newPassword)
    PS-->>AuthAPI: Hashed password
    AuthAPI->>UR: update(userId, newPasswordHash)
    UR->>DB: UPDATE users SET password_hash
    AuthAPI->>SR: deleteByUserId(userId)
    SR->>DB: DELETE FROM user_sessions
    AuthAPI->>AL: logAction('password_reset_completed')
    AL->>DB: INSERT INTO audit_logs
    AuthAPI-->>LC: Password reset successful
    LC->>LC: Redirect to login

    Note over U, DB: Two-Factor Authentication Flow
    participant TFS as TwoFactorService
    
    U->>LC: Login with 2FA enabled
    LC->>AS: login(credentials)
    AS->>AuthAPI: POST /api/auth/login
    AuthAPI->>UR: findByEmail(email)
    UR-->>AuthAPI: User with 2FA enabled
    AuthAPI->>PS: verifyPassword(password, hash)
    PS-->>AuthAPI: Password valid
    AuthAPI->>TFS: generateCode()
    TFS-->>AuthAPI: 6-digit code
    AuthAPI->>ES: sendTwoFactorCode(user, code)
    ES-->>AuthAPI: Code sent
    AuthAPI-->>AS: Requires 2FA verification
    AS-->>LC: Show 2FA input
    U->>LC: Enter 2FA code
    LC->>AS: login(credentials, twoFactorCode)
    AS->>AuthAPI: POST /api/auth/login
    AuthAPI->>TFS: verifyCode(secret, code)
    TFS-->>AuthAPI: Code valid
    AuthAPI->>AuthAPI: Complete login process
    AuthAPI->>SR: create(sessionData)
    AuthAPI-->>AS: Login successful